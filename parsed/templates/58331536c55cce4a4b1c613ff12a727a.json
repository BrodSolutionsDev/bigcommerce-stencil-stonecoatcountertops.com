{"components/custom/project-builder/countertop/step5":"<div id=\"results\" class=\"flex-col step\" style=\"display: none\">\n  <h2 class=\"calculator-heading\">Results</h2>\n  <div class=\"step-wrapper flex-row\">\n    <div class=\"step-wrapper__left\">\n      <div id=\"project-requirements\">\n        <h3>Project Requirements</h3>\n        <p>\n          <span class=\"result-title\">Total Square Footage:</span>\n          <span id=\"sqft-results\"></span> sqft\n        </p>\n        <p class=\"kit-coverage-results\">\n          <span class=\"result-title\">Total Project Coverage:</span>\n          <span id=\"coverage-results\"></span> sqft\n        </p>\n        <p>\n          <span class=\"result-title\">Project Surface:</span>\n          <span id=\"project_type-results\"></span>\n        </p>\n        <p class=\"undercoat-color-results\">\n          <span class=\"result-title\">Undercoat Color:</span>\n          <span id=\"undercoat_color-results\"></span>\n        </p>\n        <p>\n          <span class=\"result-title\">Color System:</span>\n          <span id=\"project_system-results\"></span>\n        </p>\n        <p class=\"custom-color-results\">\n          <span class=\"result-title\">Primary Color:</span>\n          <span id=\"primary_color-results\"></span>\n        </p>\n        <p class=\"custom-color-results\">\n          <span class=\"result-title\">Secondary Color:</span>\n          <span id=\"secondary_color-results\"></span>\n        </p>\n        <p class=\"custom-color-results\">\n          <span class=\"result-title\">Accent Color:</span>\n          <span id=\"accent_color-results\"></span>\n        </p>\n        <p>\n          <span class=\"result-title\">Finish:</span>\n          <span id=\"project_finish-results\"></span>\n        </p>\n        <button id=\"pdf\">Download PDF Instructions</button>\n      </div>\n    </div>\n    <div class=\"step-wrapper__right flex-col\">\n      <h3>Products in Kit</h3>\n      <div id=\"results-cart-list\" class=\"flex-col\"></div>\n      <div id=\"add-to-cart\" class=\"flex-row\">\n        <div id=\"project-cart-buttons\">\n          <button id=\"atc\">Add to Cart</button>\n          <button id=\"sfl\">Save for Later</button>\n        </div>\n        <p id=\"kit-total\"></p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  let addToCartArr = [];\n\n  const callback = async (mutationList, observer) => {\n    // don't run any code unless the currentStep is on 4\n    if (currentStep !== 5) return;\n    addToCartArr = [];\n    // set the add to cart text to Add to Cart every time this function is ran\n    document.getElementById('atc').innerText = 'Add to Cart';\n    // set the add to cart button to \"not disabled\" every time this function is ran\n    document.getElementById('atc').disabled = false;\n    // grab the requirements from the localStorage object\n    const requirements = JSON.parse(localStorage.getItem('project-requirements'));\n    // loop over the requirements to append to the DOM (project requirements list)\n    for (const [key, value] of Object.entries(requirements)) {\n      if (key !== 'sqft') {\n        // if the key does not equal sqft\n        // destructure the name and sku from the object entry\n        const { name, sku } = value;\n        // if there is no value, skip this iteration\n        if (value === '') continue;\n        // display the selected requirement next to the name in the requirement list (ex: Project Surface: Existing Countertop)\n        document.getElementById(`${key}-results`).innerHTML = name;\n      } else {\n        // if the key DOES equal sqft, set the number as the name in the requirment list (ex: Total Square Footage: 22 sqft)\n        document.getElementById(`${key}-results`).innerHTML = value;\n      }\n    }\n\n    // Show/hide the custom color selections from the requirement list in the DOM if custom colors were/were not chosen\n    if (requirements['project_system'].name !== 'Custom') {\n      document.querySelectorAll('.custom-color-results').forEach(color => (color.style.display = 'none'));\n      document.querySelector('.undercoat-color-results').style.display = 'none';\n      document.querySelector('.kit-coverage-results').style.display = 'block';\n    } else {\n      document.querySelectorAll('.custom-color-results').forEach(color => (color.style.display = 'block'));\n      document.querySelector('.undercoat-color-results').style.display = 'block';\n      document.querySelector('.kit-coverage-results').style.display = 'none';\n    }\n\n    // update coverage results based on the kit coverage\n    if (requirements.sqft <= 10) {\n      document.getElementById('coverage-results').innerText = '10';\n    } else if (requirements.sqft <= 20) {\n      document.getElementById('coverage-results').innerText = '20';\n    } else if (requirements.sqft <= 40) {\n      document.getElementById('coverage-results').innerText = '40';\n    } else if (requirements.sqft <= 80) {\n      document.getElementById('coverage-results').innerText = '80';\n    }\n\n    const detailsArr = [];\n    for (const [key, value] of Object.entries(requirements)) {\n      if (key === 'undercoat_color' && value.name === 'Grey') {\n        continue;\n      }\n      detailsArr.push(getProductDetails(value.sku));\n    }\n\n    // push the undercoat_color requirements to the details array\n    const undercoatColor = requirements['undercoat_color'];\n    if (undercoatColor.name) {\n      // if grey is the chosen color...\n      if (undercoatColor.sku.includes('__')) {\n        detailsArr.push(getProductDetails(undercoatColor.sku.split('__')[0]));\n        detailsArr.push(getProductDetails(undercoatColor.sku.split('__')[1]));\n      } else {\n        // otherwise, add the chosen color (black or white)\n        detailsArr.push(getProductDetails(undercoatColor.sku));\n      }\n    }\n\n    // getProductDetails returns a promise, return an array of settled promises\n    const settled = await Promise.allSettled(detailsArr);\n    // filter out the results with values from the settled array\n    const results = settled.filter(result => result.value);\n    // clear the cart list to append updated values every time this is ran\n    document.getElementById('results-cart-list').innerHTML = null;\n    // return all the skus from the requirements\n    const reqValues = getValuesFromRequirements(Object.entries(requirements));\n\n    function getValuesFromRequirements(values) {\n      // store the skus in a temp array to return\n      const skus = [];\n      // loop over the requirement results\n      for (const [key, value] of values) {\n        // if the value is the sq ft requirement, continue in the loop\n        if (typeof value === 'number') continue;\n        // destructure the name and sku from the requirement\n        const { name, sku } = value;\n        // if either name or sku is null, continue in the loop\n        if (name === null || sku === null || sku === undefined) continue;\n        // console.log('SKU: ', sku);\n        if (sku.includes('__')) {\n          // grey undercoat\n          skus.push({\n            sku: sku.split('__')[0],\n            name: name,\n            key: key\n          });\n          skus.push({\n            sku: sku.split('__')[1],\n            name: name,\n            key: key\n          });\n        } else {\n          // everything else\n          skus.push({\n            sku: sku,\n            name: name,\n            key: key\n          });\n        }\n      }\n      return skus;\n    }\n\n    for (const { sku, name, key } of reqValues) {\n      if (sku === '') continue;\n      if (JSON.parse(localStorage.getItem('project-requirements'))['project_system'].name !== 'Custom') {\n        if (key === 'primary_color' || key === 'secondary_color' || key === 'accent_color') continue;\n      }\n      // get the value from the GraphQL results from the sku in the requirements\n      const { value } = results.filter(result => result.value.sku === sku)[0];\n      console.log('Value: ', value);\n      // get the variant from the value that matches the sku in the requirements\n      const variant = value.variants.filter(variant => variant.sku === value.sku)[0];\n      console.log('Variant: ', variant);\n      // add the color quantity based on color choice\n      let qty;\n      if (key === 'primary_color') qty = 6;\n      else if (key === 'secondary_color' || key === 'accent_color') qty = 3;\n      else qty = 1;\n      // create a div to add to the cart list\n      const cartItem = document.createElement('div');\n      cartItem.className = 'results-cart-item';\n      cartItem.dataset.price = value.sale_price ? value.sale_price : value.default_price;\n      // set the innerHTML of the div + add option line if there is a variant option\n      cartItem.innerHTML = `\n        <img class=\"results-cart-item__image\" src=\"${value.image}\" />\n        <h4 class=\"results-cart-item__title\"><a href=\"${value.url}\">${value.name.toUpperCase()}</a></h4>\n        ${\n          variant.options.length\n            ? `<p class=\"results-cart-item__option\">${variant.options[0].name}: ${variant.options[0].values[0].label}</p>`\n            : ''\n        }\n        <p class=\"results-cart-item__quantity\">Quantity: ${qty}</p>\n        `;\n      // append the div to the cart list\n      document.getElementById('results-cart-list').appendChild(cartItem);\n      // add the data to the cart array\n      if (variant.options.length) {\n        // if the variant has options\n        addToCartArr.push({\n          product_id: value.id,\n          variant: {\n            option_id: variant.options[0].option_id,\n            value_id: variant.options[0].values[0].value_id\n          }\n        });\n      } else {\n        // if the variant does NOT have options\n        addToCartArr.push({\n          product_id: value.id,\n          variant: null\n        });\n      }\n    }\n\n    // ==========================================\n    // SAVE FOR LATER\n    // ==========================================\n    // Assuming you have a button with id 'sfl'\n    document.getElementById('sfl').addEventListener('click', function () {\n      // present a modal with Email and Name fields\n\n      // Your project requirements data\n      const projectRequirements = {\n        // @ BRAD:  what else needs to be included?\n        // Cart Object?\n        // Customer ID?\n        // Referral URL?\n        // For now, the API will accept all of the body data as a single object, so please include all necessary data here\n        store_hash: 'fy21dwtsxg',\n        project_data: JSON.parse(localStorage.getItem('project-requirements')),\n        cart_array: addToCartArr\n      };\n\n      // Post data to the endpoint\n      fetch('https://my.polytek.com/api/calculation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(projectRequirements)\n      })\n        .then(response => response.json())\n        .then(data => console.log(data))\n        .catch(error => {\n          console.error('Error:', error);\n        });\n    });\n\n    // loop over each total using the data-price attribute\n    const total = Array.from(document.querySelectorAll('[data-price]'))\n      .map(elem => Number(elem.dataset.price))\n      .reduce((acc, curr) => acc + curr);\n    // set the total in the DOM\n    document.getElementById('kit-total').innerHTML = `Kit Total: $${total.toFixed(2)}`;\n    // fire off the addToCart function when the add to cart button is clicked\n    document.getElementById('atc').addEventListener('click', function (e) {\n      addToCart(addToCartArr);\n    });\n  };\n\n  // Create an observer instance linked to the callback function\n  const observer = new MutationObserver(callback);\n\n  // Start observing the target node for configured mutations\n  observer.observe(document.getElementById('progress-bar'), { attributes: true, childList: true, subtree: true });\n</script>\n\n<script></script>\n"}
